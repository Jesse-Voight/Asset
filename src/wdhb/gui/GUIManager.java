/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wdhb.gui;

import java.awt.Point;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import wdhb.util.DatabaseAccess;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import wdhb.util.BetterTableModel;
import wdhb.util.ComboObject;
import wdhb.util.ExecuteVNC;

/**
 *
 * @author JessVoig
 */
public class GUIManager extends javax.swing.JFrame {

    public GUIManager() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aboutScreenDialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        userHistoryDialog = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        userLabel = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        userHistoryTable = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        pcEditDialog = new javax.swing.JDialog();
        pcNameLabel = new javax.swing.JLabel();
        editPCSerialNumberField = new javax.swing.JTextField();
        editPCAssetNumberField = new javax.swing.JTextField();
        editPCNotesField = new javax.swing.JTextField();
        editPCCommonUsersField = new javax.swing.JTextField();
        editPCLocationCombo = new javax.swing.JComboBox();
        editPCModelCombo = new javax.swing.JComboBox();
        editPCMonitorCombo1 = new javax.swing.JComboBox();
        editPCMonitorCombo2 = new javax.swing.JComboBox();
        editPCStatusCombo = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        editPCSaveButton = new javax.swing.JButton();
        editPCCancelButton = new javax.swing.JButton();
        editPCReplacementDateChooser = new com.toedter.calendar.JDateChooser();
        addMonitorDialog = new javax.swing.JDialog();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jButton13 = new javax.swing.JButton();
        addMonitorSaveButton = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        modelSelect = new javax.swing.JComboBox();
        statusComboBox = new javax.swing.JComboBox();
        addMonitorModelDialog = new javax.swing.JDialog();
        addMonitorModelTitle = new javax.swing.JLabel();
        addMonitorModelMakeLabel = new javax.swing.JLabel();
        addMonitorModelLabel = new javax.swing.JLabel();
        addMonitorMakeField = new javax.swing.JTextField();
        addMonitorModelField = new javax.swing.JTextField();
        addMonitorModelSave = new javax.swing.JButton();
        addMonitorModelCancel = new javax.swing.JButton();
        addLocationDialog = new javax.swing.JDialog();
        jLabel25 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        addLocationBuildingField = new javax.swing.JTextField();
        addLocationDepartmentField = new javax.swing.JTextField();
        addLocationA1Field = new javax.swing.JTextField();
        addLocationA2Field = new javax.swing.JTextField();
        addLocationTownField = new javax.swing.JTextField();
        addLocationRCField = new javax.swing.JTextField();
        addLocationButton = new javax.swing.JButton();
        addLocationCancelButton = new javax.swing.JButton();
        addPCModelDialog = new javax.swing.JDialog();
        jLabel6 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        addPCModelMakeField = new javax.swing.JTextField();
        addPCModelModelField = new javax.swing.JTextField();
        addPCModelSubModelField = new javax.swing.JTextField();
        savePCModelButton = new javax.swing.JButton();
        addPCModelCancelButton = new javax.swing.JButton();
        jTab = new javax.swing.JTabbedPane();
        pcPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        pcRefreshButton = new javax.swing.JButton();
        pcSearchTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        monitorPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        monitorTable = new javax.swing.JTable();
        monitorRefreshButton = new javax.swing.JButton();
        addMonitorButton = new javax.swing.JButton();
        monitorModelPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        monitorModelTable = new javax.swing.JTable();
        monitorModelRefreshButton = new javax.swing.JButton();
        addMonitorModelButton = new javax.swing.JButton();
        locationPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        locationTable = new javax.swing.JTable();
        locationRefreshButton = new javax.swing.JButton();
        openLocationDialog = new javax.swing.JButton();
        pcModelPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        pcModelTable = new javax.swing.JTable();
        pcModelRefreshButton = new javax.swing.JButton();
        addPCModelButton = new javax.swing.JButton();
        userHistoryPanel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        userHistoryRefreshButton = new javax.swing.JButton();
        userHistoryViewButton = new javax.swing.JButton();
        userHistorySearchField = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        decommissionCheck = new javax.swing.JCheckBoxMenuItem();
        aboutMenu = new javax.swing.JMenu();

        aboutScreenDialog.setTitle("About");
        aboutScreenDialog.setAlwaysOnTop(true);
        aboutScreenDialog.setForeground(new java.awt.Color(0, 153, 153));
        aboutScreenDialog.setLocationByPlatform(true);
        aboutScreenDialog.setMinimumSize(new java.awt.Dimension(340, 195));
        aboutScreenDialog.setResizable(false);

        jLabel1.setText("Made by Jesse Voight");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("Version 1.0");

        jButton7.setText("Close");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 30)); // NOI18N
        jLabel3.setText("WDHB Asset Manager");

        jLabel4.setText("Database by Dave King");

        javax.swing.GroupLayout aboutScreenDialogLayout = new javax.swing.GroupLayout(aboutScreenDialog.getContentPane());
        aboutScreenDialog.getContentPane().setLayout(aboutScreenDialogLayout);
        aboutScreenDialogLayout.setHorizontalGroup(
            aboutScreenDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutScreenDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aboutScreenDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(aboutScreenDialogLayout.createSequentialGroup()
                        .addGroup(aboutScreenDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton7))
                    .addGroup(aboutScreenDialogLayout.createSequentialGroup()
                        .addGroup(aboutScreenDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(0, 29, Short.MAX_VALUE)))
                .addContainerGap())
        );
        aboutScreenDialogLayout.setVerticalGroup(
            aboutScreenDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aboutScreenDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addGroup(aboutScreenDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton7)
                    .addGroup(aboutScreenDialogLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)))
                .addContainerGap())
        );

        userHistoryDialog.setTitle("User History");
        userHistoryDialog.setAlwaysOnTop(true);
        userHistoryDialog.setMinimumSize(new java.awt.Dimension(440, 430));
        userHistoryDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                userHistoryDialogWindowActivated(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel5.setText("User History -");

        userLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        userLabel.setText("user");

        userHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "ID PC", "Name", "Date", "cFree"
            }
        ));
        jScrollPane7.setViewportView(userHistoryTable);

        jButton9.setText("Close");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout userHistoryDialogLayout = new javax.swing.GroupLayout(userHistoryDialog.getContentPane());
        userHistoryDialog.getContentPane().setLayout(userHistoryDialogLayout);
        userHistoryDialogLayout.setHorizontalGroup(
            userHistoryDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userHistoryDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userHistoryDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton9)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, userHistoryDialogLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userLabel))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE))
                .addContainerGap())
        );
        userHistoryDialogLayout.setVerticalGroup(
            userHistoryDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userHistoryDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userHistoryDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(userLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton9)
                .addContainerGap())
        );

        jInternalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ICT Asset Manager", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10), java.awt.Color.pink)); // NOI18N
        jInternalFrame1.setTitle("ICT Asset Manager");
        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pcEditDialog.setTitle("Edit PC Details");
        pcEditDialog.setAlwaysOnTop(true);
        pcEditDialog.setMinimumSize(new java.awt.Dimension(500, 405));
        pcEditDialog.setResizable(false);

        pcNameLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        pcNameLabel.setText("Asset");

        editPCSerialNumberField.setText("Serial Number");

        editPCAssetNumberField.setText("Asset Number");

        editPCNotesField.setText("Notes");

        editPCCommonUsersField.setText("Common Users");

        editPCLocationCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        editPCLocationCombo.setLightWeightPopupEnabled(false);
        editPCLocationCombo.setMaximumSize(new java.awt.Dimension(350, 24));
        editPCLocationCombo.setMinimumSize(new java.awt.Dimension(350, 24));
        editPCLocationCombo.setName(""); // NOI18N
        editPCLocationCombo.setPreferredSize(new java.awt.Dimension(350, 20));

        editPCModelCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        editPCMonitorCombo1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        editPCMonitorCombo2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        editPCStatusCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setText("Location");

        jLabel8.setText("PC Model");

        jLabel9.setText("Serial Number");

        jLabel10.setText("Monitor 1");

        jLabel11.setText("Monitor 2");

        jLabel12.setText("Asset Number");

        jLabel13.setText("Notes");

        jLabel14.setText("Status");

        jLabel15.setText("Common Users");

        jLabel16.setText("Replacement Date");

        editPCSaveButton.setText("Save");
        editPCSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPCSaveButtonActionPerformed(evt);
            }
        });

        editPCCancelButton.setText("Cancel");
        editPCCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPCCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pcEditDialogLayout = new javax.swing.GroupLayout(pcEditDialog.getContentPane());
        pcEditDialog.getContentPane().setLayout(pcEditDialogLayout);
        pcEditDialogLayout.setHorizontalGroup(
            pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pcEditDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pcEditDialogLayout.createSequentialGroup()
                        .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7))
                        .addGap(78, 78, 78)
                        .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editPCModelCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editPCLocationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pcEditDialogLayout.createSequentialGroup()
                        .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16))
                        .addGap(34, 34, 34)
                        .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editPCMonitorCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editPCSerialNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editPCMonitorCombo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editPCAssetNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editPCNotesField, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editPCStatusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editPCCommonUsersField, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pcEditDialogLayout.createSequentialGroup()
                                .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pcEditDialogLayout.createSequentialGroup()
                                        .addComponent(editPCReplacementDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pcEditDialogLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(editPCCancelButton)))
                                .addGap(18, 18, 18)
                                .addComponent(editPCSaveButton))))
                    .addComponent(pcNameLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pcEditDialogLayout.setVerticalGroup(
            pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pcEditDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pcNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(editPCLocationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editPCModelCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editPCSerialNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editPCMonitorCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editPCMonitorCombo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editPCAssetNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editPCNotesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editPCStatusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editPCCommonUsersField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pcEditDialogLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(editPCReplacementDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pcEditDialogLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                        .addGroup(pcEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editPCCancelButton)
                            .addComponent(editPCSaveButton))
                        .addContainerGap())))
        );

        addMonitorDialog.setTitle("Add Monitor");
        addMonitorDialog.setAlwaysOnTop(true);
        addMonitorDialog.setMinimumSize(new java.awt.Dimension(400, 370));
        addMonitorDialog.setModal(true);
        addMonitorDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                addMonitorDialogWindowActivated(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel17.setText("Add New Monitor");

        jLabel18.setText("Model:");

        jLabel19.setText("Asset:");

        jLabel20.setText("Status:");

        jLabel21.setText("Serial No:");

        jLabel22.setText("Date Installed:");

        jLabel23.setText("Notes:");

        jButton13.setText("Close ");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        addMonitorSaveButton.setText("Add");
        addMonitorSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMonitorSaveButtonActionPerformed(evt);
            }
        });

        modelSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        statusComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout addMonitorDialogLayout = new javax.swing.GroupLayout(addMonitorDialog.getContentPane());
        addMonitorDialog.getContentPane().setLayout(addMonitorDialogLayout);
        addMonitorDialogLayout.setHorizontalGroup(
            addMonitorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMonitorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addMonitorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addMonitorDialogLayout.createSequentialGroup()
                        .addComponent(jButton13)
                        .addGap(18, 18, 18)
                        .addComponent(addMonitorSaveButton))
                    .addGroup(addMonitorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addMonitorDialogLayout.createSequentialGroup()
                            .addComponent(jLabel22)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jLabel17))
                    .addGroup(addMonitorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addMonitorDialogLayout.createSequentialGroup()
                            .addComponent(jLabel21)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextField6))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addMonitorDialogLayout.createSequentialGroup()
                            .addGroup(addMonitorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel19)
                                .addComponent(jLabel20)
                                .addComponent(jLabel18))
                            .addGap(18, 18, 18)
                            .addGroup(addMonitorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(modelSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(statusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(addMonitorDialogLayout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        addMonitorDialogLayout.setVerticalGroup(
            addMonitorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMonitorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addGap(18, 18, 18)
                .addGroup(addMonitorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(modelSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMonitorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMonitorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(statusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMonitorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMonitorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMonitorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addGroup(addMonitorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton13)
                    .addComponent(addMonitorSaveButton))
                .addContainerGap())
        );

        addMonitorModelDialog.setTitle("Add Monitor Model");
        addMonitorModelDialog.setAlwaysOnTop(true);
        addMonitorModelDialog.setMinimumSize(new java.awt.Dimension(340, 190));

        addMonitorModelTitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        addMonitorModelTitle.setText("Add Monitor Model");

        addMonitorModelMakeLabel.setText("Make:");

        addMonitorModelLabel.setText("Model:");

        addMonitorMakeField.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        addMonitorModelField.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        addMonitorModelSave.setText("Save");
        addMonitorModelSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMonitorModelSaveActionPerformed(evt);
            }
        });

        addMonitorModelCancel.setText("Cancel");
        addMonitorModelCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMonitorModelCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addMonitorModelDialogLayout = new javax.swing.GroupLayout(addMonitorModelDialog.getContentPane());
        addMonitorModelDialog.getContentPane().setLayout(addMonitorModelDialogLayout);
        addMonitorModelDialogLayout.setHorizontalGroup(
            addMonitorModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMonitorModelDialogLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(addMonitorModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addMonitorModelTitle)
                    .addGroup(addMonitorModelDialogLayout.createSequentialGroup()
                        .addComponent(addMonitorModelMakeLabel)
                        .addGap(21, 21, 21)
                        .addComponent(addMonitorMakeField, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addMonitorModelDialogLayout.createSequentialGroup()
                        .addComponent(addMonitorModelLabel)
                        .addGap(18, 18, 18)
                        .addComponent(addMonitorModelField, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addMonitorModelDialogLayout.createSequentialGroup()
                        .addComponent(addMonitorModelCancel)
                        .addGap(168, 168, 168)
                        .addComponent(addMonitorModelSave))))
        );
        addMonitorModelDialogLayout.setVerticalGroup(
            addMonitorModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMonitorModelDialogLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(addMonitorModelTitle)
                .addGap(11, 11, 11)
                .addGroup(addMonitorModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addMonitorModelDialogLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(addMonitorModelMakeLabel))
                    .addComponent(addMonitorMakeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(addMonitorModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addMonitorModelLabel)
                    .addComponent(addMonitorModelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMonitorModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addMonitorModelCancel)
                    .addComponent(addMonitorModelSave)))
        );

        addLocationDialog.setAlwaysOnTop(true);
        addLocationDialog.setMinimumSize(new java.awt.Dimension(400, 315));
        addLocationDialog.setResizable(false);

        jLabel25.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel25.setText("Add Location");

        jLabel24.setText("Building:");

        jLabel26.setText("Department:");

        jLabel27.setText("Address1:");

        jLabel28.setText("Address2:");

        jLabel29.setText("Town:");

        jLabel30.setText("RC Code:");

        addLocationButton.setText("Save");
        addLocationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLocationButtonActionPerformed(evt);
            }
        });

        addLocationCancelButton.setText("Cancel");
        addLocationCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLocationCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addLocationDialogLayout = new javax.swing.GroupLayout(addLocationDialog.getContentPane());
        addLocationDialog.getContentPane().setLayout(addLocationDialogLayout);
        addLocationDialogLayout.setHorizontalGroup(
            addLocationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addLocationDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addLocationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addLocationDialogLayout.createSequentialGroup()
                        .addGroup(addLocationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel26)
                            .addComponent(jLabel24))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addLocationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addLocationBuildingField)
                            .addComponent(addLocationDepartmentField))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addLocationDialogLayout.createSequentialGroup()
                        .addGroup(addLocationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addLocationDialogLayout.createSequentialGroup()
                                .addComponent(jLabel27)
                                .addGap(18, 18, 18)
                                .addComponent(addLocationA1Field))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addLocationDialogLayout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addGap(0, 240, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addLocationDialogLayout.createSequentialGroup()
                                .addComponent(jLabel28)
                                .addGap(18, 18, 18)
                                .addComponent(addLocationA2Field))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addLocationDialogLayout.createSequentialGroup()
                                .addComponent(jLabel29)
                                .addGap(37, 37, 37)
                                .addComponent(addLocationTownField))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addLocationDialogLayout.createSequentialGroup()
                                .addComponent(jLabel30)
                                .addGap(18, 18, 18)
                                .addComponent(addLocationRCField)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addLocationDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addLocationCancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addLocationButton)
                .addContainerGap())
        );
        addLocationDialogLayout.setVerticalGroup(
            addLocationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addLocationDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addLocationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(addLocationBuildingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addLocationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(addLocationDepartmentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addLocationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(addLocationA1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addLocationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(addLocationA2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addLocationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(addLocationTownField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addLocationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(addLocationRCField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addLocationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addLocationButton)
                    .addComponent(addLocationCancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addPCModelDialog.setMinimumSize(new java.awt.Dimension(300, 220));
        addPCModelDialog.setResizable(false);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel6.setText("Add PC Model");

        jLabel31.setText("Make:");

        jLabel32.setText("Model:");

        jLabel33.setText("Sub Model:");

        savePCModelButton.setText("Save");
        savePCModelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePCModelButtonActionPerformed(evt);
            }
        });

        addPCModelCancelButton.setText("Cancel");
        addPCModelCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPCModelCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addPCModelDialogLayout = new javax.swing.GroupLayout(addPCModelDialog.getContentPane());
        addPCModelDialog.getContentPane().setLayout(addPCModelDialogLayout);
        addPCModelDialogLayout.setHorizontalGroup(
            addPCModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPCModelDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPCModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addPCModelDialogLayout.createSequentialGroup()
                        .addGroup(addPCModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6)
                            .addGroup(addPCModelDialogLayout.createSequentialGroup()
                                .addComponent(jLabel31)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addPCModelMakeField))
                            .addGroup(addPCModelDialogLayout.createSequentialGroup()
                                .addComponent(jLabel32)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addPCModelModelField))
                            .addGroup(addPCModelDialogLayout.createSequentialGroup()
                                .addComponent(jLabel33)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addPCModelSubModelField, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPCModelDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addPCModelCancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(savePCModelButton)))
                .addContainerGap())
        );
        addPCModelDialogLayout.setVerticalGroup(
            addPCModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPCModelDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPCModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(addPCModelMakeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPCModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(addPCModelModelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPCModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(addPCModelSubModelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPCModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(savePCModelButton)
                    .addComponent(addPCModelCancelButton))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ICT Asset Manager");
        setForeground(java.awt.Color.pink);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        resultsTable.setAutoCreateRowSorter(true);
        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "IdPC", "Name", "IDLocation", "IDPCModel", "SerialNo", "Monitor1", "Monitor2", "AssetNo", "LastLogin", "Notes", "Status", "RepDate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        resultsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(resultsTable);

        pcRefreshButton.setText("Refresh");
        pcRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcRefreshButtonActionPerformed(evt);
            }
        });

        pcSearchTextField.setText("Enter Text Here");
        pcSearchTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pcSearchTextFieldFocusGained(evt);
            }
        });
        pcSearchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pcSearchTextFieldKeyReleased(evt);
            }
        });

        jButton1.setText("OpenVNC");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Open C Drive");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pcPanelLayout = new javax.swing.GroupLayout(pcPanel);
        pcPanel.setLayout(pcPanelLayout);
        pcPanelLayout.setHorizontalGroup(
            pcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pcPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pcRefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 395, Short.MAX_VALUE)
                .addComponent(pcSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(pcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pcPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 886, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        pcPanelLayout.setVerticalGroup(
            pcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pcPanelLayout.createSequentialGroup()
                .addContainerGap(539, Short.MAX_VALUE)
                .addGroup(pcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pcSearchTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pcRefreshButton)
                        .addComponent(jButton1)
                        .addComponent(jButton2)))
                .addContainerGap())
            .addGroup(pcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pcPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                    .addGap(46, 46, 46)))
        );

        jTab.addTab("PC's", pcPanel);

        monitorTable.setAutoCreateRowSorter(true);
        monitorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Asset", "Serial", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        monitorTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(monitorTable);

        monitorRefreshButton.setText("Refresh");
        monitorRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monitorRefreshButtonActionPerformed(evt);
            }
        });

        addMonitorButton.setText("Add Monitor");
        addMonitorButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addMonitorButtonMouseClicked(evt);
            }
        });
        addMonitorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMonitorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout monitorPanelLayout = new javax.swing.GroupLayout(monitorPanel);
        monitorPanel.setLayout(monitorPanelLayout);
        monitorPanelLayout.setHorizontalGroup(
            monitorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(monitorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(monitorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(monitorPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 886, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(monitorPanelLayout.createSequentialGroup()
                        .addComponent(monitorRefreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addMonitorButton)
                        .addGap(18, 18, 18))))
        );
        monitorPanelLayout.setVerticalGroup(
            monitorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(monitorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                .addGap(11, 11, 11)
                .addGroup(monitorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monitorRefreshButton)
                    .addComponent(addMonitorButton))
                .addContainerGap())
        );

        jTab.addTab("Monitors", monitorPanel);

        monitorModelTable.setAutoCreateRowSorter(true);
        monitorModelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "idMonitorModel", "Make", "Model"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        monitorModelTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(monitorModelTable);

        monitorModelRefreshButton.setText("Refresh");
        monitorModelRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monitorModelRefreshButtonActionPerformed(evt);
            }
        });

        addMonitorModelButton.setText("Add Monitor Model");
        addMonitorModelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMonitorModelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout monitorModelPanelLayout = new javax.swing.GroupLayout(monitorModelPanel);
        monitorModelPanel.setLayout(monitorModelPanelLayout);
        monitorModelPanelLayout.setHorizontalGroup(
            monitorModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(monitorModelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(monitorModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 886, Short.MAX_VALUE)
                    .addGroup(monitorModelPanelLayout.createSequentialGroup()
                        .addComponent(monitorModelRefreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addMonitorModelButton)))
                .addContainerGap())
        );
        monitorModelPanelLayout.setVerticalGroup(
            monitorModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(monitorModelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(monitorModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monitorModelRefreshButton)
                    .addComponent(addMonitorModelButton))
                .addContainerGap())
        );

        jTab.addTab("Monitor Models", monitorModelPanel);

        locationTable.setAutoCreateRowSorter(true);
        locationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "idLocation", "Building", "Department", "Address1", "Address2", "Town", "RC"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        locationTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(locationTable);

        locationRefreshButton.setText("Refresh");
        locationRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationRefreshButtonActionPerformed(evt);
            }
        });

        openLocationDialog.setText("Add Location");
        openLocationDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openLocationDialogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout locationPanelLayout = new javax.swing.GroupLayout(locationPanel);
        locationPanel.setLayout(locationPanelLayout);
        locationPanelLayout.setHorizontalGroup(
            locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(locationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 886, Short.MAX_VALUE)
                    .addGroup(locationPanelLayout.createSequentialGroup()
                        .addComponent(locationRefreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(openLocationDialog)))
                .addContainerGap())
        );
        locationPanelLayout.setVerticalGroup(
            locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(locationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locationRefreshButton)
                    .addComponent(openLocationDialog))
                .addContainerGap())
        );

        jTab.addTab("Locations", locationPanel);

        pcModelTable.setAutoCreateRowSorter(true);
        pcModelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "idPCModel", "Make", "Model", "SubModel"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pcModelTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(pcModelTable);

        pcModelRefreshButton.setText("Refresh");
        pcModelRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcModelRefreshButtonActionPerformed(evt);
            }
        });

        addPCModelButton.setText("Add PC Model");
        addPCModelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPCModelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pcModelPanelLayout = new javax.swing.GroupLayout(pcModelPanel);
        pcModelPanel.setLayout(pcModelPanelLayout);
        pcModelPanelLayout.setHorizontalGroup(
            pcModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pcModelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pcModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 886, Short.MAX_VALUE)
                    .addGroup(pcModelPanelLayout.createSequentialGroup()
                        .addComponent(pcModelRefreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addPCModelButton)))
                .addContainerGap())
        );
        pcModelPanelLayout.setVerticalGroup(
            pcModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pcModelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pcModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pcModelRefreshButton)
                    .addComponent(addPCModelButton))
                .addContainerGap())
        );

        jTab.addTab("PC Model", pcModelPanel);

        userTable.setAutoCreateRowSorter(true);
        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "UserName", "LatestPC"
            }
        ));
        userTable.setGridColor(new java.awt.Color(100, 100, 100));
        userTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        userTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userTableMouseClicked(evt);
            }
        });
        userTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                userTableKeyTyped(evt);
            }
        });
        jScrollPane6.setViewportView(userTable);

        userHistoryRefreshButton.setText("Refresh");
        userHistoryRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userHistoryRefreshButtonActionPerformed(evt);
            }
        });

        userHistoryViewButton.setText("View Details");
        userHistoryViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userHistoryViewButtonActionPerformed(evt);
            }
        });

        userHistorySearchField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                userHistorySearchFieldFocusGained(evt);
            }
        });
        userHistorySearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                userHistorySearchFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout userHistoryPanelLayout = new javax.swing.GroupLayout(userHistoryPanel);
        userHistoryPanel.setLayout(userHistoryPanelLayout);
        userHistoryPanelLayout.setHorizontalGroup(
            userHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userHistoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 886, Short.MAX_VALUE)
                    .addGroup(userHistoryPanelLayout.createSequentialGroup()
                        .addComponent(userHistoryRefreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(userHistorySearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userHistoryViewButton)))
                .addContainerGap())
        );
        userHistoryPanelLayout.setVerticalGroup(
            userHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userHistoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(userHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userHistoryRefreshButton)
                    .addComponent(userHistoryViewButton)
                    .addComponent(userHistorySearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTab.addTab("User History", userHistoryPanel);

        fileMenu.setText("File");

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        decommissionCheck.setText("Show Decommissioned PCs");
        decommissionCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                decommissionCheckItemStateChanged(evt);
            }
        });
        fileMenu.add(decommissionCheck);

        jMenuBar1.add(fileMenu);

        aboutMenu.setText("About");
        aboutMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aboutMenuMouseClicked(evt);
            }
        });
        jMenuBar1.add(aboutMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTab)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTab)
        );

        jTab.getAccessibleContext().setAccessibleName("Tab1");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // <editor-fold defaultstate="collapsed" desc="Button Action Listeners"> 
    private void pcRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcRefreshButtonActionPerformed
        loadPCs();
    }//GEN-LAST:event_pcRefreshButtonActionPerformed

    private void monitorRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monitorRefreshButtonActionPerformed
        loadMonitors();
    }//GEN-LAST:event_monitorRefreshButtonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void monitorModelRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monitorModelRefreshButtonActionPerformed
        loadMonitorModel();
    }//GEN-LAST:event_monitorModelRefreshButtonActionPerformed

    private void locationRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationRefreshButtonActionPerformed
        loadLocations();
    }//GEN-LAST:event_locationRefreshButtonActionPerformed

    private void pcModelRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcModelRefreshButtonActionPerformed
        loadPCModels();
    }//GEN-LAST:event_pcModelRefreshButtonActionPerformed

    private void userHistoryRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userHistoryRefreshButtonActionPerformed
        loadUsers();
    }//GEN-LAST:event_userHistoryRefreshButtonActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        aboutScreenDialog.setVisible(false);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void aboutMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutMenuMouseClicked
        //jDialog1.setSize(500, 500);
        aboutScreenDialog.setLocation(jMenuBar1.getLocationOnScreen());
        aboutScreenDialog.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_aboutMenuMouseClicked

    private void decommissionCheckItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_decommissionCheckItemStateChanged
        loadPCs();// TODO add your handling code here:
    }//GEN-LAST:event_decommissionCheckItemStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //jButton8.isDefaultButton();
        //loginScreen.setVisible(true);
        //loginScreen.setModal(true);
        //jTab.setVisible(false);
        loadAll();// TODO add your handling code here: window opened
    }//GEN-LAST:event_formWindowOpened

    private void pcSearchTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pcSearchTextFieldFocusGained
        pcSearchTextField.setText("");// TODO add your handling code here:
    }//GEN-LAST:event_pcSearchTextFieldFocusGained

    private void userHistoryViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userHistoryViewButtonActionPerformed
        if (userTable.getSelectedRow() != -1) {
            userHistoryDialog.setVisible(true);
            userHistoryDialog.setLocation(jMenuBar1.getLocationOnScreen());
            String userTemp = (String) userTable.getModel().getValueAt(userTable.getSelectedRow(), 0);

            System.out.println(userTemp.toString());
            userLabel.setText(userTemp);
        } else {
            JOptionPane.showMessageDialog(null, "No User Selected!", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_userHistoryViewButtonActionPerformed

    private void userHistoryDialogWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_userHistoryDialogWindowActivated
        loadUserDetails();
    }//GEN-LAST:event_userHistoryDialogWindowActivated

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        userHistoryDialog.setVisible(false);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void userTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userTableMouseClicked
        if (evt.getClickCount() == 2) {
            userHistoryTable.setModel(new DefaultTableModel());
            userHistoryDialog.setVisible(true);
            userHistoryDialog.setLocation(jMenuBar1.getLocationOnScreen());
            jScrollPane7.getViewport().setViewPosition(new Point(0, 0));
            String userTemp = (String) userTable.getModel().getValueAt(userTable.getSelectedRow(), 0);

            System.out.println(userTemp.toString());
            userLabel.setText(userTemp);
        }
    }//GEN-LAST:event_userTableMouseClicked

    private void resultsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsTableMouseClicked
        if (evt.getClickCount() == 2) {
            //Primariliy for displaying all data for editing
            pcEditDialog.setVisible(true);
            pcEditDialog.setLocation(jMenuBar1.getLocationOnScreen());
            loadPCDetails();
        }
    }//GEN-LAST:event_resultsTableMouseClicked

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        addMonitorDialog.setVisible(false);
    }//GEN-LAST:event_jButton13ActionPerformed

    private void addMonitorSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMonitorSaveButtonActionPerformed
        //Save monitor data and send as insert query
        String idMonitor, idMonitorModel, serialNumber, assetNumber, status, notes;

        idMonitor = DatabaseAccess.getMaxMonitor();
        ComboObject idTempMonitorModel = (ComboObject) modelSelect.getSelectedItem();
        idMonitorModel = idTempMonitorModel.getID();
        serialNumber = jTextField6.getText();
        status = statusComboBox.getSelectedItem().toString();
        assetNumber = jTextField4.getText();
        notes = jTextField8.getText();

        if (idMonitorModel == null | serialNumber.equals("") | assetNumber.equals("") | notes.equals("")) {
            JOptionPane.showMessageDialog(null, "Please fill all fields", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        long databaseTime;
        Date datePicked = jDateChooser1.getDate();
        if (datePicked == null) {
            Date dateTemp = new Date();
            databaseTime = (dateTemp.getTime() / 1000);
        } else {
            databaseTime = datePicked.getTime();
        }
        String happy = String.valueOf(databaseTime / 1000);
        String query = ("INSERT INTO `assetDB`.`Monitor` (`idMonitor`, `idMonitorModel`, `SerialNo`, `AssetNo`, `DateInstalled`, `Status`, `Notes`) VALUES ('"
                + idMonitor + "', '" + idMonitorModel + "', '" + serialNumber + "', '" + assetNumber + "', '" + happy + "', '" + status + "', '" + notes + "');");
        DatabaseAccess.executeQuery(query);  //Database write
        //System.out.println(query);
        this.loadMonitors();
        addMonitorDialog.dispose();
    }//GEN-LAST:event_addMonitorSaveButtonActionPerformed

    private void addMonitorDialogWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_addMonitorDialogWindowActivated
        DefaultComboBoxModel newMonitorComboModel = new DefaultComboBoxModel();
        DefaultComboBoxModel statusComboModel = new DefaultComboBoxModel();
        statusComboModel.addElement("A");
        statusComboModel.addElement("I");
        statusComboBox.setModel(statusComboModel);

        jDateChooser1.setDate(new Date());

        ArrayList<String[]> loadMonitorComboBox = DatabaseAccess.loadMonitorModels();
        for (Object monitorObject : loadMonitorComboBox) {
            String[] stringArray = (String[]) monitorObject;
            ComboObject temp = new ComboObject();
            temp.setDescription(stringArray[1] + " " + stringArray[2]);
            temp.setID(stringArray[0]);
            newMonitorComboModel.addElement(temp);
            //System.out.println(temp.toString());
        }
        modelSelect.setModel(newMonitorComboModel);
        modelSelect.setSelectedIndex(-1);
    }//GEN-LAST:event_addMonitorDialogWindowActivated

    private void addMonitorButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMonitorButtonMouseClicked
        /*addMonitorDialog.setLocation(jMenuBar1.getLocationOnScreen());
         addMonitorDialog.setVisible(true);*/
    }//GEN-LAST:event_addMonitorButtonMouseClicked

    private void addMonitorModelSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMonitorModelSaveActionPerformed
        String monitorMake = addMonitorMakeField.getText();
        String monitorModel = addMonitorModelField.getText();
        String monitorModelID = DatabaseAccess.getMaxMonitorModel();
        String query = "INSERT INTO `assetDB`.`MonitorModel` (`idMonitorModel`, `Make`, `Model`) VALUES ('" + monitorModelID + "', '" + monitorMake + "', '" + monitorModel + "');";
        //System.out.println(query);
        DatabaseAccess.executeQuery(query);
        addMonitorMakeField.setText("");
        addMonitorModelField.setText("");
        this.loadMonitorModel();
    }//GEN-LAST:event_addMonitorModelSaveActionPerformed

    private void addMonitorModelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMonitorModelButtonActionPerformed
        addMonitorModelDialog.setLocation(jMenuBar1.getLocationOnScreen());
        addMonitorModelDialog.setVisible(true);
    }//GEN-LAST:event_addMonitorModelButtonActionPerformed

    private void addMonitorModelCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMonitorModelCancelActionPerformed
        addMonitorModelDialog.setVisible(false);
    }//GEN-LAST:event_addMonitorModelCancelActionPerformed

    private void addMonitorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMonitorButtonActionPerformed
        addMonitorDialog.setLocation(jMenuBar1.getLocationOnScreen());
        addMonitorDialog.setVisible(true);
    }//GEN-LAST:event_addMonitorButtonActionPerformed

    private void addLocationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLocationButtonActionPerformed
        String idLocation = DatabaseAccess.getMaxLocation();
        String building = addLocationBuildingField.getText();
        String department = addLocationDepartmentField.getText();
        String address1 = addLocationA1Field.getText();
        String address2 = addLocationA2Field.getText();
        String town = addLocationTownField.getText();
        String rc = addLocationRCField.getText();

        String query = "INSERT INTO `assetDB`.`Location` (`idLocation`, `Building`, `Department`, `Address1`, `Address2`, `Town`, `RC`) VALUES "
                + "('" + idLocation + "', '" + building + "', '" + department + "', '" + address1 + "', '" + address2 + "', '" + town + "', '" + rc + "');";

        DatabaseAccess.executeQuery(query);
        //System.out.println(query);
        this.loadLocations();
    }//GEN-LAST:event_addLocationButtonActionPerformed

    private void openLocationDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openLocationDialogActionPerformed
        addLocationDialog.setLocation(jMenuBar1.getLocationOnScreen());
        addLocationDialog.setVisible(true);
    }//GEN-LAST:event_openLocationDialogActionPerformed

    private void addLocationCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLocationCancelButtonActionPerformed

        addLocationBuildingField.setText("");
        addLocationDepartmentField.setText("");
        addLocationA1Field.setText("");
        addLocationA2Field.setText("");
        addLocationTownField.setText("");
        addLocationRCField.setText("");
        addLocationDialog.setVisible(false);
    }//GEN-LAST:event_addLocationCancelButtonActionPerformed

    private void addPCModelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPCModelButtonActionPerformed
        addPCModelDialog.setLocation(jMenuBar1.getLocationOnScreen());
        addPCModelDialog.setVisible(true);
    }//GEN-LAST:event_addPCModelButtonActionPerformed

    private void savePCModelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePCModelButtonActionPerformed
        String idPCModel = DatabaseAccess.getMaxPCModel();
        String make = addPCModelMakeField.getText();
        String model = addPCModelModelField.getText();
        String subModel = addPCModelSubModelField.getText();

        String query = "INSERT INTO `assetDB`.`PCModel` (`idPCModel`, `Make`, `Model`, `SubModel`) VALUES ('" + idPCModel + "', '" + make + "', '" + model + "', '" + subModel + "');";

        System.out.println(query);
        DatabaseAccess.executeQuery(query);

        this.loadPCModels();
    }//GEN-LAST:event_savePCModelButtonActionPerformed

    private void addPCModelCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPCModelCancelButtonActionPerformed
        addPCModelMakeField.setText("");
        addPCModelModelField.setText("");
        addPCModelSubModelField.setText("");

        addPCModelDialog.setVisible(false);
    }//GEN-LAST:event_addPCModelCancelButtonActionPerformed

    private void editPCCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPCCancelButtonActionPerformed
        pcEditDialog.setVisible(false);
    }//GEN-LAST:event_editPCCancelButtonActionPerformed

    private void editPCSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPCSaveButtonActionPerformed
        String idPC = (String) resultsTable.getModel().getValueAt(resultsTable.getSelectedRow(), 0);
        String location = ((ComboObject) editPCLocationCombo.getSelectedItem()).getID();
        String pcModel = ((ComboObject) editPCModelCombo.getSelectedItem()).getID();
        String serialNumber;
        if (editPCSerialNumberField.getText() == null) {
            serialNumber = "";
        } else {
            serialNumber = editPCSerialNumberField.getText();
        }
        //-----------------------------------------------------------------------------------
        String monitor1;
        if (((ComboObject) editPCMonitorCombo1.getSelectedItem()) == null) {
            monitor1 = "0";
        } else {
            monitor1 = ((ComboObject) editPCMonitorCombo1.getSelectedItem()).toString();
        }
        String monitor2;
        if (((ComboObject) editPCMonitorCombo2.getSelectedItem()) == null) {
            monitor2 = "0";
        } else {
            monitor2 = ((ComboObject) editPCMonitorCombo2.getSelectedItem()).toString();
        }
        String assetNumber = editPCAssetNumberField.getText();
        String notes;
        if (editPCNotesField.getText() == null) {
            notes = "";
        } else {
            notes = editPCNotesField.getText();
            notes.replace("'", "''");
        }
        //-------------------------------------------------------
        String status = editPCStatusCombo.getSelectedItem().toString();
        //=======================================================
        String commonUsers;
        if (editPCCommonUsersField.getText() == null) {
            commonUsers = "";
        } else {
            commonUsers = editPCCommonUsersField.getText();
        }

        Date tempReplacementDate = editPCReplacementDateChooser.getDate();
        long dateTransformed = tempReplacementDate.getTime() / 1000;
        String replacementDate = String.valueOf(dateTransformed);

        String query = "UPDATE PC SET idLocation = '" + location + "', idPCModel = '" + pcModel + "', SerialNo = '" + serialNumber + "', Monitor1 = '" + monitor1 + "', Monitor2 = '" + monitor2 + "', AssetNo = '" + assetNumber + "', "
                + "Notes = '" + notes + "', Status = '" + status + "', CommUsers = '" + commonUsers + "', RepDate = '" + replacementDate + "' WHERE idPC = '" + idPC + "';";
        System.out.println(query);
        try {
            //DatabaseAccess.executeQuery(query);
            DatabaseAccess.editPCDetails(location, pcModel, serialNumber, monitor1, monitor2, assetNumber, notes, status, commonUsers, replacementDate, idPC);

        } catch (Exception e) {
            e.printStackTrace();
        }
        this.loadPCs();
    }//GEN-LAST:event_editPCSaveButtonActionPerformed

    private void userHistorySearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userHistorySearchFieldKeyReleased

        String searchWord = userHistorySearchField.getText();
        System.out.println(searchWord);
        for (int i = 0; i < userTable.getModel().getRowCount(); i++) {
            String temp = (String) userTable.getModel().getValueAt(i, 0);
            if (temp.toLowerCase().contains(searchWord.toLowerCase())) {
                //System.out.println(temp + " "+ searchWord);
                userTable.setRowSelectionInterval(i, i);
                jScrollPane6.getViewport().setViewPosition(new Point(0, i * userTable.getRowHeight()));
                return;
            }
        }
    }//GEN-LAST:event_userHistorySearchFieldKeyReleased

    private void userHistorySearchFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userHistorySearchFieldFocusGained
        //userHistorySearchField.setText("");
    }//GEN-LAST:event_userHistorySearchFieldFocusGained

    private void userTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userTableKeyTyped
        userHistorySearchField.requestFocus();
        String s = String.valueOf(evt.getKeyChar());
        System.out.println(s);
        userHistorySearchField.setText(s);
    }//GEN-LAST:event_userTableKeyTyped

    private void pcSearchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pcSearchTextFieldKeyReleased
        newFindPC();
    }//GEN-LAST:event_pcSearchTextFieldKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (resultsTable.getSelectedRow() != -1) {
            String workstationName = (String) resultsTable.getModel().getValueAt(resultsTable.getSelectedRow(), 1);
            try {
                ExecuteVNC.vncStart(workstationName);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(resultsTable.getSelectedRow() != -1){
            String workstationName = (String) resultsTable.getModel().getValueAt(resultsTable.getSelectedRow(), 1);
            try {
                ExecuteVNC.cDriveStart(workstationName);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed
// </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Main"> 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIManager().setVisible(true);

            }
        });
    }
// </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Generated Variables">     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JDialog aboutScreenDialog;
    private javax.swing.JTextField addLocationA1Field;
    private javax.swing.JTextField addLocationA2Field;
    private javax.swing.JTextField addLocationBuildingField;
    private javax.swing.JButton addLocationButton;
    private javax.swing.JButton addLocationCancelButton;
    private javax.swing.JTextField addLocationDepartmentField;
    private javax.swing.JDialog addLocationDialog;
    private javax.swing.JTextField addLocationRCField;
    private javax.swing.JTextField addLocationTownField;
    private javax.swing.JButton addMonitorButton;
    private javax.swing.JDialog addMonitorDialog;
    private javax.swing.JTextField addMonitorMakeField;
    private javax.swing.JButton addMonitorModelButton;
    private javax.swing.JButton addMonitorModelCancel;
    private javax.swing.JDialog addMonitorModelDialog;
    private javax.swing.JTextField addMonitorModelField;
    private javax.swing.JLabel addMonitorModelLabel;
    private javax.swing.JLabel addMonitorModelMakeLabel;
    private javax.swing.JButton addMonitorModelSave;
    private javax.swing.JLabel addMonitorModelTitle;
    private javax.swing.JButton addMonitorSaveButton;
    private javax.swing.JButton addPCModelButton;
    private javax.swing.JButton addPCModelCancelButton;
    private javax.swing.JDialog addPCModelDialog;
    private javax.swing.JTextField addPCModelMakeField;
    private javax.swing.JTextField addPCModelModelField;
    private javax.swing.JTextField addPCModelSubModelField;
    private javax.swing.JCheckBoxMenuItem decommissionCheck;
    private javax.swing.JTextField editPCAssetNumberField;
    private javax.swing.JButton editPCCancelButton;
    private javax.swing.JTextField editPCCommonUsersField;
    private javax.swing.JComboBox editPCLocationCombo;
    private javax.swing.JComboBox editPCModelCombo;
    private javax.swing.JComboBox editPCMonitorCombo1;
    private javax.swing.JComboBox editPCMonitorCombo2;
    private javax.swing.JTextField editPCNotesField;
    private com.toedter.calendar.JDateChooser editPCReplacementDateChooser;
    private javax.swing.JButton editPCSaveButton;
    private javax.swing.JTextField editPCSerialNumberField;
    private javax.swing.JComboBox editPCStatusCombo;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton9;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTab;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JPanel locationPanel;
    private javax.swing.JButton locationRefreshButton;
    private javax.swing.JTable locationTable;
    private javax.swing.JComboBox modelSelect;
    private javax.swing.JPanel monitorModelPanel;
    private javax.swing.JButton monitorModelRefreshButton;
    private javax.swing.JTable monitorModelTable;
    private javax.swing.JPanel monitorPanel;
    private javax.swing.JButton monitorRefreshButton;
    private javax.swing.JTable monitorTable;
    private javax.swing.JButton openLocationDialog;
    private javax.swing.JDialog pcEditDialog;
    private javax.swing.JPanel pcModelPanel;
    private javax.swing.JButton pcModelRefreshButton;
    private javax.swing.JTable pcModelTable;
    private javax.swing.JLabel pcNameLabel;
    private javax.swing.JPanel pcPanel;
    private javax.swing.JButton pcRefreshButton;
    private javax.swing.JTextField pcSearchTextField;
    private javax.swing.JTable resultsTable;
    private javax.swing.JButton savePCModelButton;
    private javax.swing.JComboBox statusComboBox;
    private javax.swing.JDialog userHistoryDialog;
    private javax.swing.JPanel userHistoryPanel;
    private javax.swing.JButton userHistoryRefreshButton;
    private javax.swing.JTextField userHistorySearchField;
    private javax.swing.JTable userHistoryTable;
    private javax.swing.JButton userHistoryViewButton;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
// </editor-fold>     
    // <editor-fold defaultstate="collapsed" desc="Big Functions">     
    private void loadUsers() {
        // Tricky one to show all users
        String colNames[] = {"UserName", "Last Login"};
        BetterTableModel dtm = new BetterTableModel();
        dtm.setDataVector(null, colNames);
        ArrayList<String[]> qResult = DatabaseAccess.loadUsers();
        userTable.setModel(dtm);
        for (int i = 0; i < qResult.size(); i++) {
            dtm.addRow(new String[2]);
            userTable.getModel().setValueAt(qResult.get(i)[0], i, 0);
            userTable.getModel().setValueAt(qResult.get(i)[1], i, 1);
        }
    }

    private void loadUserDetails() {
        String colNames[] = {"PC", "Name", "Date"};
        ArrayList<String[]> userDetes = DatabaseAccess.loadUserInfo(userLabel.getText());
        BetterTableModel btm = new BetterTableModel();
        btm.setDataVector(null, colNames);
        userHistoryTable.setModel(btm);
        for (int i = 0; i < userDetes.size(); i++) {
            btm.addRow(new String[3]);
            userHistoryTable.getModel().setValueAt(userDetes.get(i)[0], i, 0);
            userHistoryTable.getModel().setValueAt(userDetes.get(i)[1], i, 1);
            userHistoryTable.getModel().setValueAt(userDetes.get(i)[2], i, 2);
        }
    }

    private void loadPCDetails() {
        if (resultsTable.getSelectedRow() != -1) {
            String assetTemp = (String) resultsTable.getModel().getValueAt(resultsTable.getSelectedRow(), 1);

            //System.out.println(assetTemp); print pc name
            pcNameLabel.setText(assetTemp);
            DefaultComboBoxModel locationComboModel = new DefaultComboBoxModel();    //create combobox models before laoding
            DefaultComboBoxModel pcModelComboModel = new DefaultComboBoxModel();
            DefaultComboBoxModel monitorComboModel1 = new DefaultComboBoxModel();
            DefaultComboBoxModel monitorComboModel2 = new DefaultComboBoxModel();

            ArrayList<String[]> loadLocationCombo = DatabaseAccess.loadLocations();
            for (Object locationObject : loadLocationCombo) {
                String[] stringArray = (String[]) locationObject;
                ComboObject temp = new ComboObject();
                temp.setDescription(stringArray[1] + " " + stringArray[2]);
                temp.setID(stringArray[0]);
                locationComboModel.addElement(temp);
            }

            ArrayList<String[]> loadPCModelCombo = DatabaseAccess.loadPCModels();
            for (Object pcModelObject : loadPCModelCombo) {
                String[] stringArray = (String[]) pcModelObject;
                ComboObject temp = new ComboObject();
                temp.setDescription(stringArray[1] + " " + stringArray[2]);
                temp.setID(stringArray[0]);
                pcModelComboModel.addElement(temp);
            }

            ArrayList<String[]> loadMonitorCombo = DatabaseAccess.loadMonitors();
            for (Object monitorObject : loadMonitorCombo) {
                String[] stringArray = (String[]) monitorObject;
                ComboObject temp = new ComboObject();
                temp.setDescription(stringArray[1]);
                temp.setID(stringArray[0]);
                monitorComboModel1.addElement(temp);
                monitorComboModel2.addElement(temp);
            }
            editPCLocationCombo.setModel(locationComboModel);
            //locationCombo.getModel();
            editPCStatusCombo.setModel(new DefaultComboBoxModel(new String[]{"A", "D", "I", "S"}));
            editPCMonitorCombo1.setModel(monitorComboModel1);
            editPCMonitorCombo2.setModel(monitorComboModel2);
            editPCModelCombo.setModel(pcModelComboModel);
            String pcDataTemp = (String) resultsTable.getModel().getValueAt(resultsTable.getSelectedRow(), 0);
            String[] pcData = DatabaseAccess.loadPCData(pcDataTemp);
            editPCSerialNumberField.setText(pcData[2]);
            editPCAssetNumberField.setText(pcData[5]);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            try {
                Date convertedDate = sdf.parse(pcData[9]);
                editPCReplacementDateChooser.setDate(convertedDate);
            } catch (ParseException ex) {
                Logger.getLogger(GUIManager.class.getName()).log(Level.SEVERE, null, ex);
            }

            editPCNotesField.setText(pcData[7]);
            editPCCommonUsersField.setText(pcData[12]);
            Boolean foundLocation = false;
            for (int i = 0; i < editPCLocationCombo.getModel().getSize(); i++) {
                ComboObject temp = (ComboObject) editPCLocationCombo.getModel().getElementAt(i);
                if (temp.getID().equals(pcData[10])) {
                    System.out.println(temp.getID()+" "+ pcData[10]);
                    editPCLocationCombo.setSelectedItem(temp);
                    foundLocation = true;
                    System.out.println("found location");
                }
            }
            if (foundLocation == false) {
                editPCLocationCombo.setSelectedIndex(-1);
            }
            for (int i = 1; i < editPCModelCombo.getModel().getSize(); i++) {
                ComboObject temp = (ComboObject) editPCModelCombo.getModel().getElementAt(i);

                if (temp.getID().equals(pcData[11])) {
                    editPCModelCombo.setSelectedItem(temp);
                }
            }
            for (int i = 0; i < editPCMonitorCombo1.getModel().getSize(); i++) {
                ComboObject temp = (ComboObject) editPCMonitorCombo1.getModel().getElementAt(i);

                if (temp.toString().equals(pcData[3])) {
                    editPCMonitorCombo1.setSelectedItem(temp);
                    break;
                }
                if (i == editPCMonitorCombo1.getModel().getSize() - 1) {
                    editPCMonitorCombo1.getModel().setSelectedItem(null);
                }

            }
            for (int i = 0; i < editPCMonitorCombo2.getModel().getSize(); i++) {
                ComboObject temp = (ComboObject) editPCMonitorCombo2.getModel().getElementAt(i);

                if (temp.toString().equals(pcData[4])) {
                    editPCMonitorCombo2.setSelectedItem(temp);
                    //System.out.println("Found: " + temp.toString() + " ID: "+ temp.getID());
                    break;
                }
                if (i == editPCMonitorCombo2.getModel().getSize() - 1) {
                    //System.out.println("No monitor bro");
                    editPCMonitorCombo2.getModel().setSelectedItem(null);
                }
            }
            for (int i = 0; i < editPCStatusCombo.getModel().getSize(); i++) {
                Object temp = editPCStatusCombo.getModel().getElementAt(i);

                if (temp.toString().equals(pcData[8])) {
                    editPCStatusCombo.getModel().setSelectedItem(temp);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "No PC Selected", "Error", JOptionPane.WARNING_MESSAGE);
        }

    }

    private void loadPCModels() {
        String colNames[] = {"idPCModel", "Make", "Model", "SubModel"};
        BetterTableModel dtm = new BetterTableModel();
        dtm.setDataVector(null, colNames);
        ArrayList<String[]> qResult = DatabaseAccess.loadPCModels();
        pcModelTable.setModel(dtm);
        for (int i = 0; i < qResult.size(); i++) {
            dtm.addRow(new String[4]);
            pcModelTable.getModel().setValueAt(qResult.get(i)[0], i, 0);
            pcModelTable.getModel().setValueAt(qResult.get(i)[1], i, 1);
            pcModelTable.getModel().setValueAt(qResult.get(i)[2], i, 2);
            pcModelTable.getModel().setValueAt(qResult.get(i)[3], i, 3);
        }
    }

/*    private void findPC() {
        String toFind = pcSearchTextField.getText();// TODO add your handling code here
        for (int x = 0; x < resultsTable.getRowCount(); x++) {
            for (int y = 0; y < resultsTable.getColumnCount(); y++) {
                String tempValue = (String) resultsTable.getValueAt(x, y);
                if (tempValue != null) {
                    if (tempValue.toLowerCase().equals(toFind.toLowerCase())) {
                        System.out.println(tempValue);
                        resultsTable.setRowSelectionInterval(x, x);
                        jScrollPane1.getViewport().setViewPosition(new Point(0, x * resultsTable.getRowHeight()));
                        return;
                    }

                }
            }
        }
        JOptionPane.showMessageDialog(null, "No Result Found", "No Match", JOptionPane.WARNING_MESSAGE);
    }*/

    private void newFindPC() {
        int count = 0;
        String searchWord = pcSearchTextField.getText();
        for (int x = 0; x < resultsTable.getRowCount(); x++) {
            for (int y = 0; y < resultsTable.getColumnCount(); y++) {
                if (resultsTable.getValueAt(x, y) != null) {
                    String tempValue = (String) resultsTable.getValueAt(x, y);
                    if (tempValue.toLowerCase().contains(searchWord.toLowerCase())) {
                        System.out.println("Found item");
                        resultsTable.setRowSelectionInterval(x, x);
                        jScrollPane1.getViewport().setViewPosition(new Point(0, x * resultsTable.getRowHeight()));
                        return;
                    }
                }
            }
        }
    }
    /*
    private void newnewFindPC() {
        String searchWord = pcSearchTextField.getText();
        System.out.println(searchWord);
        for (int i = 0; i < resultsTable.getModel().getRowCount(); i++) {
            String temp = (String) resultsTable.getModel().getValueAt(i, 1);
            if (temp.toLowerCase().contains(searchWord.toLowerCase())) {
                //System.out.println(temp + " "+ searchWord);
                resultsTable.setRowSelectionInterval(i, i);
                jScrollPane1.getViewport().setViewPosition(new Point(0, i * resultsTable.getRowHeight()));
                return;
            }
        }
    }
    */
    private void loadLocations() {
        String colNames[] = {"idLocation", "Building", "Department", "Address1", "Address2", "Town", "RCode"};
        BetterTableModel dtm = new BetterTableModel();
        dtm.setDataVector(null, colNames);
        ArrayList<String[]> qResult = DatabaseAccess.loadLocations();
        locationTable.setModel(dtm);
        for (int i = 0; i < qResult.size(); i++) {
            dtm.addRow(new String[7]);
            locationTable.getModel().setValueAt(qResult.get(i)[0], i, 0);
            locationTable.getModel().setValueAt(qResult.get(i)[1], i, 1);
            locationTable.getModel().setValueAt(qResult.get(i)[2], i, 2);
            locationTable.getModel().setValueAt(qResult.get(i)[3], i, 3);
            locationTable.getModel().setValueAt(qResult.get(i)[4], i, 4);
            locationTable.getModel().setValueAt(qResult.get(i)[5], i, 5);
            locationTable.getModel().setValueAt(qResult.get(i)[6], i, 6);
        }
    }

    private void loadMonitorModel() {
        String colNames[] = {"idMonitorModel", "Make", "Model"};
        BetterTableModel dtm = new BetterTableModel();
        dtm.setDataVector(null, colNames);
        ArrayList<String[]> qResult = DatabaseAccess.loadMonitorModels();
        monitorModelTable.setModel(dtm);
        for (int i = 0; i < qResult.size(); i++) {
            dtm.addRow(new String[3]);
            monitorModelTable.getModel().setValueAt(qResult.get(i)[0], i, 0);
            monitorModelTable.getModel().setValueAt(qResult.get(i)[1], i, 1);
            monitorModelTable.getModel().setValueAt(qResult.get(i)[2], i, 2);
        }
    }

    private void loadMonitors() {
        String colNames[] = {"Monitorid", "Asset", "Serial", "Status", "Notes", "IDMonitorModel", "DateInstalled"};
        BetterTableModel dtm = new BetterTableModel();
        dtm.setDataVector(null, colNames);
        ArrayList<String[]> qResult = DatabaseAccess.loadMonitors();
        monitorTable.setModel(dtm);
        for (int i = 0; i < qResult.size(); i++) {
            dtm.addRow(new String[6]);
            monitorTable.getModel().setValueAt(qResult.get(i)[0], i, 0);
            monitorTable.getModel().setValueAt(qResult.get(i)[1], i, 1);
            monitorTable.getModel().setValueAt(qResult.get(i)[2], i, 2);
            monitorTable.getModel().setValueAt(qResult.get(i)[3], i, 3);
            monitorTable.getModel().setValueAt(qResult.get(i)[4], i, 4);
            monitorTable.getModel().setValueAt(qResult.get(i)[5], i, 5);
            monitorTable.getModel().setValueAt(qResult.get(i)[6], i, 6);
        }
    }

    private void loadPCs() {
        int selectedRow = -1;
        if(resultsTable.getSelectedRow() != -1){
            selectedRow = resultsTable.getSelectedRow();
        }
        Boolean loadDecom = decommissionCheck.isSelected();
        String colNames[] = {"Id", "Name", "Location", "PCModel", "SerialNumber", "Monitor1", "Monitor2", "AssetNum", "LastLogin",
            "Notes", "Status", "RepDate"};
        BetterTableModel dtm = new BetterTableModel();
        dtm.setDataVector(null, colNames);

        ArrayList<String[]> qResult = DatabaseAccess.loadPCs(loadDecom);
        resultsTable.setModel(dtm);
        for (int i = 0; i < qResult.size(); i++) {
            dtm.addRow(new String[13]);
            resultsTable.getModel().setValueAt(qResult.get(i)[0], i, 0);
            resultsTable.getModel().setValueAt(qResult.get(i)[1], i, 1);
            resultsTable.getModel().setValueAt(qResult.get(i)[2], i, 2);
            resultsTable.getModel().setValueAt(qResult.get(i)[3], i, 3);
            resultsTable.getModel().setValueAt(qResult.get(i)[4], i, 4);
            resultsTable.getModel().setValueAt(qResult.get(i)[5], i, 5);
            resultsTable.getModel().setValueAt(qResult.get(i)[6], i, 6);
            resultsTable.getModel().setValueAt(qResult.get(i)[7], i, 7);
            resultsTable.getModel().setValueAt(qResult.get(i)[8], i, 8);
            resultsTable.getModel().setValueAt(qResult.get(i)[9], i, 9);
            resultsTable.getModel().setValueAt(qResult.get(i)[10], i, 10);
            resultsTable.getModel().setValueAt(qResult.get(i)[11], i, 11);

        }
        resultsTable.getColumnModel().removeColumn(resultsTable.getColumnModel().getColumn(0));
        if(selectedRow != -1){
        resultsTable.setRowSelectionInterval(selectedRow, selectedRow);
        }
    }

    private void loadAll() {
        loadPCs();
        loadLocations();
        loadMonitorModel();
        loadMonitors();
        loadPCModels();
        loadUsers();
        //TableColumn col = resultsTable.getColumnModel().getColumn(10);
        //col.setMaxWidth(45);
        //col.setMinWidth(45);
        //col.setPreferredWidth(10);
    }
// </editor-fold> 
}
